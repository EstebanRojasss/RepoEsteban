SELECT * FROM users;
-- INSERT TO: INSERTAR NUEVOS DATOS A LA TABLA USERS.
INSERT INTO users(name, surname, age, email) VALUES('hielos','rene',67, 'hielosR@gmail.com');
-- ORDER BY: ORDENAR LISTA POR ORDEN DESCENDENTE.
SELECT name FROM users WHERE email = 'sara@gmail.com' ORDER BY age desc;
-- LIKE: OBITENE LOS DATOS DE LA TABLA USERS QUE CONTENGAN ALGO SEMEJANTE.
SELECT * FROM users WHERE email like 'gmail.com';
-- EL PORCENTAJE INDICA QUE PUEDE HABER CONTENIDO DETRAS DE LO QUE SOLICITEMOS
SELECT * FROM users WHERE email LIKE '%gmail.com';
-- NOT LIKE: OBTIENE LOS DATOS DE LA COLUMNA "EMAIL" QUE NO SEAN IGUAL AL CRITERIO ESTABLECIDO EN LA TABLA USERS.
SELECT * FROM users WHERE email not like 'sara@gmail.com';
-- LIMIT: OBTIENE LAS DOS PRIMERAS FILAS DE LA TABLA USERS
SELECT * FROM users WHERE email not like 'sara@gmail.com' LIMIT 2;
-- IS NULL: OBTIENE LOS DATOS DE LA COLUMNA email QUE SEAN NULOS.
SELECT * FROM users WHERE email is null;
-- IS NOT NULL: OBTIENE LOS DATOS DE LA COLUMNA email QUE NO SEAN NULOS.
SELECT * FROM users WHERE email is not null;
-- MAX: OBTENER DATO DE LA TABLA users CON EL MAXIMO VALOR;
SELECT max(age) FROM users;
-- MIN: OBTENER DATO DE LA TABLA users CON EL MINIMO VALOR;
SELECT min(age) FROM users;
-- COUNT: OBTIENE LA CANTIDAD DE USERS CON EDAD A TRAVES DE UN CONTADOR.
SELECT COUNT(age) FROM users;
-- SUM: OBTIENE EL RESULTADO DE LA SUMA DE LAS EDADES DE LA TABLA users.
SELECT SUM(age) FROM users;
-- AVG: OBTIENE EL PROMEDIO DE EDAD DE LA TABLA users.
SELECT AVG(age) FROM users;
-- IN: OBTIENE DE MANERA SIMPLIFICADA LOS NOMBRES QUE QUERAMOS DE LA LISTA.
SELECT * FROM users WHERE name IN ('esteban', 'sara', 'carlos');
-- BETWEEN: OBTIENE TODaS LAS EDADES(numeros) ENTRE LOS CRITERIOS ESTABLECIDOS.
SELECT * FROM users WHERE age BETWEEN 10 AND 50;
-- OBTIENE Y PERSONALIZA CON UN "ALIAS" EL NOMBRE DE UNA COLUMNA DE LA TABLA.
SELECT name, init_age as 'FECHA INICIO PROGRAMACION' FROM users WHERE age BETWEEN 10 AND 50;
-- CONCAT: OBTIENE UNA CONCANTENACION DE LOS CRITERIOS ESTABLECIDOS(NOMBRE Y APELLIDO).
SELECT CONCAT(name,' ',surname)AS 'NOMBRE COMPLETO' FROM users;
-- GROUP BY: ORDENAR POR GRUPOS
SELECT MAX(age) FROM users GROUP BY age;
-- OBTIENE EL CONTADOR DE LA CANTIDAD DE EDADES IGUALES.
SELECT COUNT(age), age FROM users GROUP BY age ORDER BY age ASC; 
-- OBTIENE EL CONTADOR DE LA CANTIDAD DE EDADES IGUALES Y ORDENADA DE MAYOR A MENOR, CON LAS EDADES MAYORES A 15.
SELECT COUNT(age), age FROM users WHERE age > 15 GROUP BY age ORDER BY age ASC; 
-- HAVING: LIMITAR EL CONTADOR A QUE SEA MAYOR QUE 7.
SELECT COUNT(age) FROM users HAVING COUNT(age) > 7;
-- CASE: LANZAR UNA LOGICA CONCRETA EN FUNCION DE UNA CONDICION
SELECT *,
CASE 
WHEN age > 18 THEN 'Es mayor de edad'
WHEN age = 18 THEN 'Acaba de cumplir la mayoria de edad'
ELSE 'Es menor de edad'
END as 'agelist'
FROM users;
-- IFNULL: DAR UN VALOR A UN DATO EN CASO DE SER NULL
SELECT name, age, IFNULL(surname, 'sin datos') as 'surname' FROM users;
--
UPDATE users SET surname = 'oconnor' WHERE user_id = 2;
SELECT * FROM users;
